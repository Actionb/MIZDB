[project]
name = "MIZDB"
authors = [
    {name = "Philip Becker", email = "yummytea1@gmail.com"},
]
classifiers = [
    "Framework :: Django",
    "Programming Language :: Python :: 3",
]
readme = "README.md"
requires-python = ">=3.9"
dynamic = ["version"]

[tool.uv.pip]
generate-hashes = true

[tool.ruff]
src = ["src"]
target-version = "py312"
line-length = 120
extend-exclude = ["**/migrations/**"]

[tool.lint]
select = [
    "D",        # pydocstyle
    "E", "W",   # pycodestyle
    "F",        # flake8
    "I",        # isort
]
ignore = [
    "D1",    # D1: Missing docstring error codes (because not every function and class has a docstring)
    "D203",  # D203: 1 blank line required before class docstring (conflicts with D211 and should be disabled, see https://github.com/PyCQA/pydocstyle/pull/91)
    "D205",  # D205: 1 blank line required between summary line and description
    "D212",  # D212: Multi-line docstring summary should start at the first line
]

[tool.lint.pydocstyle]
convention = "google"

[tool.lint.pycodestyle]
max-doc-length = 88

[tool.lint.isort]
known-first-party = ["dbentry"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
addopts = [
    "--reuse-db",
]
markers = [
    "e2e: End-To-End tests with Playwright",
    # pytest-django 4.6.0 enables using django test tags as pytest markers.
    # If you don't register them, a warning about an unknown marker will be issued.
    "bug: This test is tagged as a bug test: @tag('bug')",
    "logging: This test is tagged as a logging test: @tag('logging')",
]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango50Warning",
]

[tool.mypy]
files = "dbentry/"
# https://mypy.readthedocs.io/en/stable/running_mypy.html#how-mypy-handles-imports
ignore_missing_imports = true
show_error_codes = true
pretty = true
exclude = [
    "migrations",
    "management",
    "docs",
    "site",
]

[tool.coverage.run]
omit = [
    "dbentry/migrations/*",
]

[tool.poe.executor]
type = "virtualenv"

[tool.poe.tasks.server]
help = "Run the Django development server"
cmd = "python manage.py runserver"

[tool.poe.tasks.shell]
help = "Run interactive interpreter for this Django project"
cmd = "python manage.py shell"

[tool.poe.tasks.test]
help = "Run pytest tests with coverage - exclude slow playwright tests"
cmd = "pytest -n auto -m 'not e2e'  --cov --cov-report=html --cov-branch"

[tool.poe.tasks.qtest]
help = "(quickly) Run pytest tests, but without coverage to speed things up"
cmd = "pytest -n auto -m 'not e2e'"

[tool.poe.tasks.test-pw]
help = "Run playwright tests"
cmd = "pytest -n auto --browser firefox -m e2e"

[tool.poe.tasks.drop-testdb]
help = "Drop all test databases. This can be helpful if databases get corrupted from aborted tests."
cmd = "./scripts/droptest.sh"

[tool.poe.tasks.tox]
help = "Run tox"
cmd = "tox"

[tool.poe.tasks.ruff]
help = "Run ruff linter und formatter and fix found issues"
shell = "ruff check --fix .; ruff format"

[tool.poe.tasks.ruff-check]
help = "Run ruff check"
shell = "ruff check ."

[tool.poe.tasks.build-docs]
help = "Build offline and online docs. Upload online docs to Github pages."
shell = """
  mkdocs build -f mkdocs-offline.yml
  mkdocs gh-deploy -f mkdocs-online.yml
"""

[tool.poe.tasks.docker-restart]
help = "Restart the Docker containers"
shell = """
export COMPOSE_FILE=./docker/docker-compose.yaml;
export COMPOSE_ENV_FILES=./docker/docker-compose.env;
docker compose down && docker compose up -d
"""

[tool.poe.tasks.build]
help = "Build the MIZDB docker image"
shell = "docker build . -t ghcr.io/actionb/mizdb"

[tool.poe.tasks.publish]
help = "Build and upload the MIZDB docker image"
shell = "docker push ghcr.io/actionb/mizdb"
deps = ["build"]

[tool.poe.tasks.restore-db]
help = "Use pg_restore to restore the dev database from a backup file"
shell = """
set -e
export PGPASSWORD=$password
echo 'Deleting database...'
dropdb --username=mizdb_user --host=localhost mizdb
echo 'Re-creating database...'
createdb --username=mizdb_user --host=localhost --owner=mizdb_user mizdb
echo 'Restoring database data...'
pg_restore --username=mizdb_user --host=localhost --dbname=mizdb $file
"""

[[tool.poe.tasks.restore-db.args]]
name = "file"
help = "The database backup file"
options = ["-f", "--file"]

[[tool.poe.tasks.restore-db.args]]
name = "password"
help = "Password for the database"
default = "mizdb"
options = ["-p", "--password"]


