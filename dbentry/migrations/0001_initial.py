# Generated by Django 2.2.13 on 2020-08-26 08:28

import dbentry.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = []

    initial = True

    dependencies = [
        ('contenttypes', '__latest__'),
        ('auth', '__latest__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artikel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schlagzeile', models.CharField(max_length=200)),
                ('seite', models.PositiveSmallIntegerField()),
                ('seitenumfang', models.CharField(blank=True, choices=[('f', 'f'), ('ff', 'ff')], default='', help_text='Zwei Seiten: f; mehr als zwei Seiten: ff.', max_length=3)),
                ('zusammenfassung', models.TextField(blank=True)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Artikels')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
            ],
            options={
                'verbose_name_plural': 'Artikel',
                'verbose_name': 'Artikel',
                'abstract': False,
                'ordering': ['ausgabe__magazin__magazin_name', 'ausgabe___name', 'seite', 'schlagzeile'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('tracks', models.PositiveIntegerField(blank=True, null=True, verbose_name='Anz. Tracks')),
                ('laufzeit', models.DurationField(blank=True, help_text='Format: hh:mm:ss', null=True)),
                ('e_jahr', dbentry.fields.YearField(blank=True, null=True, verbose_name='Jahr')),
                ('quelle', models.CharField(blank=True, help_text='Broadcast, Live, etc.', max_length=200)),
                ('catalog_nr', models.CharField(blank=True, max_length=200, verbose_name='Katalog Nummer')),
                ('release_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Release ID (discogs)')),
                ('discogs_url', models.URLField(blank=True, help_text='Adresse zur discogs.com Seite dieses Objektes.', verbose_name='Link discogs.com')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Mediums')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
            ],
            options={
                'verbose_name_plural': 'Audio Materialien',
                'verbose_name': 'Audio Material',
                'abstract': False,
                'permissions': [('alter_bestand_audio', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Ausgabe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('status', models.CharField(choices=[('unb', 'unbearbeitet'), ('iB', 'in Bearbeitung'), ('abg', 'abgeschlossen'), ('kB', 'keine Bearbeitung vorgesehen')], default='unb', max_length=40, verbose_name='Bearbeitungsstatus')),
                ('e_datum', models.DateField(blank=True, help_text='Format: tt.mm.jjjj', null=True, verbose_name='Erscheinungsdatum')),
                ('jahrgang', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Jahrgang')),
                ('sonderausgabe', models.BooleanField(default=False, verbose_name='Sonderausgabe')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Ausgabe')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
            ],
            options={
                'verbose_name_plural': 'Ausgaben',
                'verbose_name': 'Ausgabe',
                'abstract': False,
                'permissions': [('alter_bestand_ausgabe', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['magazin'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Autor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('kuerzel', models.CharField(blank=True, max_length=8, verbose_name='Kürzel')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Autors')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
            ],
            options={
                'verbose_name_plural': 'Autoren',
                'verbose_name': 'Autor',
                'abstract': False,
                'ordering': ['_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band_name', models.CharField(max_length=200, verbose_name='Bandname')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Band')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
            ],
            options={
                'verbose_name_plural': 'Bands',
                'verbose_name': 'Band',
                'abstract': False,
                'ordering': ['band_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='BaseBrochure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('zusammenfassung', models.TextField(blank=True)),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('ausgabe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='beilagen', to='dbentry.Ausgabe', verbose_name='Ausgabe')),
            ],
            options={
                'abstract': False,
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Bildmaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('signatur', models.CharField(blank=True, help_text='Kürzel bestehend aus Angabe zur Größe und einer 5-stelligen fortlaufenden Nummer. Z.B.: DINA2-00395', max_length=200, null=True, unique=True)),
                ('size', models.CharField(blank=True, max_length=200, verbose_name='Größe')),
                ('datum', dbentry.fields.PartialDateField(blank=True, help_text='Teilweise Angaben sind erlaubt (z.B. Jahr & Monat aber ohne Tag).', max_length=10, verbose_name='Zeitangabe')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Bildmaterials')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
            ],
            options={
                'verbose_name_plural': 'Bild Materialien',
                'verbose_name': 'Bild Material',
                'abstract': False,
                'permissions': [('alter_bestand_bildmaterial', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Bildreihe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Bildreihen',
                'verbose_name': 'Bildreihe',
                'abstract': False,
                'ordering': ['name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Buch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('titel_orig', models.CharField(blank=True, max_length=200, verbose_name='Titel (Original)')),
                ('seitenumfang', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('jahr', dbentry.fields.YearField(blank=True, null=True, verbose_name='Jahr')),
                ('jahr_orig', dbentry.fields.YearField(blank=True, null=True, verbose_name='Jahr (Original)')),
                ('auflage', models.CharField(blank=True, max_length=200)),
                ('EAN', dbentry.fields.EANField(blank=True, max_length=17)),
                ('ISBN', dbentry.fields.ISBNField(blank=True, max_length=17)),
                ('is_buchband', models.BooleanField(default=False, help_text='Dieses Buch ist ein Sammelband bestehend aus Aufsätzen.', verbose_name='Ist Sammelband')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Buches')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('sprache', models.CharField(blank=True, max_length=200)),
                ('autor', models.ManyToManyField(to='dbentry.Autor')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
                ('buchband', models.ForeignKey(blank=True, help_text='Der Sammelband, der diesen Aufsatz enthält.', limit_choices_to={'is_buchband': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='buch_set', to='dbentry.Buch', verbose_name='Sammelband')),
            ],
            options={
                'verbose_name_plural': 'Bücher',
                'verbose_name': 'Buch',
                'abstract': False,
                'permissions': [('alter_bestand_buch', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Bundesland',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bland_name', models.CharField(max_length=200, verbose_name='Bundesland')),
                ('code', models.CharField(max_length=4)),
            ],
            options={
                'verbose_name_plural': 'Bundesländer',
                'verbose_name': 'Bundesland',
                'abstract': False,
                'ordering': ['land', 'bland_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Datei',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('media_typ', models.CharField(choices=[('audio', 'Audio'), ('video', 'Video'), ('bild', 'Bild'), ('text', 'Text'), ('sonstige', 'Sonstige')], default='audio', max_length=200, verbose_name='Media Typ')),
                ('datei_media', models.FileField(blank=True, editable=False, help_text='Datei auf Datenbank-Server hoch- bzw herunterladen.', null=True, upload_to='', verbose_name='Datei')),
                ('datei_pfad', models.CharField(blank=True, help_text='Pfad (inklusive Datei-Namen und Endung) zur Datei im gemeinsamen Ordner.', max_length=200, verbose_name='Datei-Pfad')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Datei')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
            ],
            options={
                'verbose_name_plural': 'Dateien',
                'verbose_name': 'Datei',
                'abstract': False,
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Dokument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Dokumentes')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
            ],
            options={
                'verbose_name_plural': 'Dokumente',
                'verbose_name': 'Dokument',
                'abstract': False,
                'permissions': [('alter_bestand_dokument', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='FormatSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Format-Größen',
                'verbose_name': 'Format-Größe',
                'abstract': False,
                'ordering': ['size'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='FormatTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=200)),
                ('abk', models.CharField(blank=True, max_length=200, verbose_name='Abkürzung')),
            ],
            options={
                'verbose_name_plural': 'Format-Tags',
                'verbose_name': 'Format-Tag',
                'abstract': False,
                'ordering': ['tag'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='FormatTyp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typ', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Format-Typen',
                'verbose_name': 'Format-Typ',
                'abstract': False,
                'ordering': ['typ'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Geber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Geber',
                'verbose_name': 'Geber',
                'abstract': False,
                'ordering': ['name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(max_length=100, unique=True, verbose_name='Genre')),
            ],
            options={
                'verbose_name_plural': 'Genres',
                'verbose_name': 'Genre',
                'abstract': False,
                'ordering': ['genre'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Herausgeber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('herausgeber', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Herausgeber',
                'verbose_name': 'Herausgeber',
                'abstract': False,
                'ordering': ['herausgeber'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(max_length=200, unique=True)),
                ('kuerzel', models.CharField(blank=True, max_length=8, verbose_name='Kürzel')),
            ],
            options={
                'verbose_name_plural': 'Instrumente',
                'verbose_name': 'Instrument',
                'abstract': False,
                'ordering': ['instrument', 'kuerzel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Lagerort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('ort', models.CharField(max_length=200)),
                ('raum', models.CharField(blank=True, max_length=200)),
                ('regal', models.CharField(blank=True, max_length=200)),
                ('fach', models.CharField(blank=True, max_length=200)),
                ('ordner', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Lagerorte',
                'verbose_name': 'Lagerort',
                'abstract': False,
                'ordering': ['_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('land_name', models.CharField(max_length=100, unique=True, verbose_name='Land')),
                ('code', models.CharField(max_length=4, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Länder',
                'verbose_name': 'Land',
                'abstract': False,
                'ordering': ['land_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='m2m_magazin_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'verbose_name_plural': 'Magazin-Genres',
                'db_table': 'dbentry_magazin_genre',
                'verbose_name': 'Magazin-Genre',
            },
        ),
        migrations.CreateModel(
            name='m2m_magazin_herausgeber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('herausgeber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Herausgeber')),
            ],
            options={
                'verbose_name_plural': 'Magazin-Herausgeber',
                'verbose_name': 'Magazin-Herausgeber',
            },
        ),
        migrations.CreateModel(
            name='m2m_magazin_verlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Magazin-Verlage',
                'verbose_name': 'Magazin-Verlag',
            },
        ),
        migrations.CreateModel(
            name='m2m_musiker_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'verbose_name_plural': 'Musiker-Genres',
                'db_table': 'dbentry_musiker_genre',
                'verbose_name': 'Musiker-Genre',
            },
        ),
        migrations.CreateModel(
            name='m2m_musiker_instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Instrument')),
            ],
            options={
                'verbose_name_plural': 'Musiker-Instrumente',
                'db_table': 'dbentry_musiker_instrument',
                'verbose_name': 'Musiker-Instrument',
            },
        ),
        migrations.CreateModel(
            name='m2m_video_musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.ManyToManyField(blank=True, to='dbentry.Instrument', verbose_name='Instrumente')),
            ],
            options={
                'verbose_name_plural': 'Video-Musiker',
                'db_table': 'dbentry_video_musiker',
                'verbose_name': 'Video-Musiker',
            },
        ),
        migrations.CreateModel(
            name='Magazin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('magazin_name', models.CharField(max_length=200, verbose_name='Magazin')),
                ('ausgaben_merkmal', models.CharField(blank=True, choices=[('num', 'Nummer'), ('lnum', 'Lfd.Nummer'), ('monat', 'Monat'), ('e_datum', 'Ersch.Datum')], help_text='Das dominante Merkmal der Ausgaben. Diese Angabe bestimmt die Darstellung der Ausgaben in der Änderungsliste.', max_length=8, verbose_name='Ausgaben Merkmal')),
                ('fanzine', models.BooleanField(default=False, verbose_name='Fanzine')),
                ('issn', dbentry.fields.ISSNField(blank=True, help_text='EAN (Barcode Nummer) Angaben erlaubt. Die ISSN wird dann daraus ermittelt.', max_length=9, verbose_name='ISSN')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Magazines')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('genre', models.ManyToManyField(through='dbentry.m2m_magazin_genre', to='dbentry.Genre')),
                ('herausgeber', models.ManyToManyField(through='dbentry.m2m_magazin_herausgeber', to='dbentry.Herausgeber')),
            ],
            options={
                'verbose_name_plural': 'Magazine',
                'verbose_name': 'Magazin',
                'abstract': False,
                'ordering': ['magazin_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Monat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monat', models.CharField(max_length=200, verbose_name='Monat')),
                ('abk', models.CharField(max_length=200, verbose_name='Abk')),
                ('ordinal', models.PositiveSmallIntegerField(editable=False)),
            ],
            options={
                'verbose_name_plural': 'Monate',
                'verbose_name': 'Monat',
                'abstract': False,
                'ordering': ['ordinal'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kuenstler_name', models.CharField(max_length=200, verbose_name='Künstlername')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Musikers')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('genre', models.ManyToManyField(through='dbentry.m2m_musiker_genre', to='dbentry.Genre')),
                ('instrument', models.ManyToManyField(through='dbentry.m2m_musiker_instrument', to='dbentry.Instrument')),
            ],
            options={
                'verbose_name_plural': 'Musiker',
                'verbose_name': 'Musiker',
                'abstract': False,
                'ordering': ['kuenstler_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Ort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('stadt', models.CharField(blank=True, max_length=200)),
                ('bland', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Bundesland', verbose_name='Bundesland')),
                ('land', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Land')),
            ],
            options={
                'verbose_name_plural': 'Orte',
                'unique_together': {('stadt', 'bland', 'land')},
                'verbose_name': 'Ort',
                'abstract': False,
                'ordering': ['land', 'bland', 'stadt'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('vorname', models.CharField(blank=True, max_length=200)),
                ('nachname', models.CharField(max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Person')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('orte', models.ManyToManyField(to='dbentry.Ort')),
            ],
            options={
                'verbose_name_plural': 'Personen',
                'verbose_name': 'Person',
                'abstract': False,
                'ordering': ['_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Plattenfirma',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Plattenfirmen',
                'verbose_name': 'Plattenfirma',
                'abstract': False,
                'ordering': ['name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Schlagwort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schlagwort', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Schlagwörter',
                'verbose_name': 'Schlagwort',
                'abstract': False,
                'ordering': ['schlagwort'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Schriftenreihe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Schriftenreihen',
                'verbose_name': 'Schriftenreihe',
                'abstract': False,
                'ordering': ['name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Spielort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Spielortes')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('ort', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Ort')),
            ],
            options={
                'verbose_name_plural': 'Spielorte',
                'verbose_name': 'Spielort',
                'abstract': False,
                'ordering': ['name', 'ort'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Veranstaltung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('datum', dbentry.fields.PartialDateField(blank=True, help_text='Teilweise Angaben sind erlaubt (z.B. Jahr & Monat aber ohne Tag).', max_length=10)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Veranstaltung')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
                ('genre', models.ManyToManyField(to='dbentry.Genre')),
                ('musiker', models.ManyToManyField(to='dbentry.Musiker')),
                ('person', models.ManyToManyField(to='dbentry.Person')),
            ],
            options={
                'verbose_name_plural': 'Veranstaltungen',
                'verbose_name': 'Veranstaltung',
                'abstract': False,
                'ordering': ['name', 'datum', 'spielort'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Veranstaltungsreihe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Veranstaltungsreihen',
                'verbose_name': 'Veranstaltungsreihe',
                'abstract': False,
                'ordering': ['name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Katalog',
            fields=[
                ('basebrochure_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dbentry.BaseBrochure')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Kataloges')),
                ('art', models.CharField(choices=[('merch', 'Merchandise'), ('tech', 'Instrumente & Technik'), ('ton', 'Tonträger'), ('buch', 'Bücher'), ('other', 'Anderes')], default='merch', max_length=40, verbose_name='Art d. Kataloges')),
            ],
            options={
                'verbose_name_plural': 'Warenkataloge',
                'verbose_name': 'Warenkatalog',
            },
            bases=('dbentry.basebrochure',),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('tracks', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Anz. Tracks')),
                ('laufzeit', models.DurationField(blank=True, help_text='Format: hh:mm:ss', null=True)),
                ('festplatte', models.CharField(blank=True, max_length=200)),
                ('quelle', models.CharField(blank=True, max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Mediums')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
                ('genre', models.ManyToManyField(to='dbentry.Genre')),
                ('musiker', models.ManyToManyField(through='dbentry.m2m_video_musiker', to='dbentry.Musiker')),
                ('person', models.ManyToManyField(to='dbentry.Person')),
                ('schlagwort', models.ManyToManyField(to='dbentry.Schlagwort')),
                ('spielort', models.ManyToManyField(to='dbentry.Spielort')),
                ('veranstaltung', models.ManyToManyField(to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Video Materialien',
                'verbose_name': 'Video Material',
                'abstract': False,
                'permissions': [('alter_bestand_video', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='Verlag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verlag_name', models.CharField(max_length=200, verbose_name='Verlag')),
                ('sitz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Ort')),
            ],
            options={
                'verbose_name_plural': 'Verlage',
                'verbose_name': 'Verlag',
                'abstract': False,
                'ordering': ['verlag_name', 'sitz'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='VeranstaltungAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Veranstaltung')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.AddField(
            model_name='veranstaltung',
            name='reihe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='dbentry.Veranstaltungsreihe'),
        ),
        migrations.AddField(
            model_name='veranstaltung',
            name='schlagwort',
            field=models.ManyToManyField(to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='veranstaltung',
            name='spielort',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Spielort'),
        ),
        migrations.CreateModel(
            name='Technik',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Technik')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
                ('genre', models.ManyToManyField(to='dbentry.Genre')),
                ('musiker', models.ManyToManyField(to='dbentry.Musiker')),
                ('ort', models.ManyToManyField(to='dbentry.Ort')),
                ('person', models.ManyToManyField(to='dbentry.Person')),
                ('schlagwort', models.ManyToManyField(to='dbentry.Schlagwort')),
                ('spielort', models.ManyToManyField(to='dbentry.Spielort')),
                ('veranstaltung', models.ManyToManyField(to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Technik',
                'verbose_name': 'Technik',
                'abstract': False,
                'permissions': [('alter_bestand_technik', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='SpielortAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Spielort')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.CreateModel(
            name='SchlagwortAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Schlagwort')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.CreateModel(
            name='Provenienz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typ', models.CharField(choices=[('Schenkung', 'Schenkung'), ('Spende', 'Spende'), ('Fund', 'Fund'), ('Leihgabe', 'Leihgabe'), ('Dauerleihgabe', 'Dauerleihgabe')], default='Schenkung', max_length=100, verbose_name='Art der Provenienz')),
                ('geber', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Geber')),
            ],
            options={
                'verbose_name_plural': 'Provenienzen',
                'verbose_name': 'Provenienz',
                'abstract': False,
                'ordering': ['geber', 'typ'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='MusikerAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.AddField(
            model_name='musiker',
            name='orte',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='musiker',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Person'),
        ),
        migrations.CreateModel(
            name='Memorabilien',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titel', models.CharField(max_length=200)),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Memorabiliums')),
                ('bemerkungen', models.TextField(blank=True, help_text='Kommentare für Archiv-Mitarbeiter')),
                ('band', models.ManyToManyField(to='dbentry.Band')),
                ('genre', models.ManyToManyField(to='dbentry.Genre')),
                ('musiker', models.ManyToManyField(to='dbentry.Musiker')),
                ('ort', models.ManyToManyField(to='dbentry.Ort')),
                ('person', models.ManyToManyField(to='dbentry.Person')),
                ('schlagwort', models.ManyToManyField(to='dbentry.Schlagwort')),
                ('spielort', models.ManyToManyField(to='dbentry.Spielort')),
                ('veranstaltung', models.ManyToManyField(to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Memorabilien',
                'verbose_name': 'Memorabilia',
                'abstract': False,
                'permissions': [('alter_bestand_memorabilien', 'Aktion: Bestand/Dublette hinzufügen.')],
                'ordering': ['titel'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='MagazinURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, verbose_name='Webpage')),
                ('magazin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='dbentry.Magazin')),
            ],
            options={
                'verbose_name_plural': 'Web-Adressen',
                'verbose_name': 'Web-Adresse',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.AddField(
            model_name='magazin',
            name='orte',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='magazin',
            name='verlag',
            field=models.ManyToManyField(through='dbentry.m2m_magazin_verlag', to='dbentry.Verlag'),
        ),
        migrations.AddField(
            model_name='m2m_video_musiker',
            name='musiker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='m2m_video_musiker',
            name='video',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Video'),
        ),
        migrations.AddField(
            model_name='m2m_musiker_instrument',
            name='musiker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='m2m_musiker_genre',
            name='musiker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='m2m_magazin_verlag',
            name='magazin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Magazin'),
        ),
        migrations.AddField(
            model_name='m2m_magazin_verlag',
            name='verlag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Verlag'),
        ),
        migrations.AddField(
            model_name='m2m_magazin_herausgeber',
            name='magazin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Magazin'),
        ),
        migrations.AddField(
            model_name='m2m_magazin_genre',
            name='magazin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Magazin'),
        ),
        migrations.CreateModel(
            name='m2m_datei_quelle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Audio')),
                ('bildmaterial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Bildmaterial')),
                ('buch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Buch')),
                ('datei', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Datei')),
                ('dokument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Dokument')),
                ('memorabilien', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Memorabilien')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Video')),
            ],
            options={
                'verbose_name_plural': 'Datei-Quellen',
                'verbose_name': 'Datei-Quelle',
                'db_table': 'dbentry_datei_quelle',
            },
        ),
        migrations.CreateModel(
            name='m2m_datei_musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datei', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Datei')),
                ('instrument', models.ManyToManyField(blank=True, to='dbentry.Instrument', verbose_name='Instrumente')),
                ('musiker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker')),
            ],
            options={
                'verbose_name_plural': 'Musiker',
                'verbose_name': 'Musiker',
                'unique_together': {('datei', 'musiker')},
                'db_table': 'dbentry_datei_musiker',
            },
        ),
        migrations.CreateModel(
            name='m2m_band_musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Band')),
                ('musiker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker')),
            ],
            options={
                'verbose_name_plural': 'Band-Mitglieder',
                'verbose_name': 'Band-Mitglied',
                'unique_together': {('band', 'musiker')},
                'db_table': 'dbentry_band_musiker',
            },
        ),
        migrations.CreateModel(
            name='m2m_band_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Band')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'verbose_name_plural': 'Band-Genres',
                'verbose_name': 'Band-Genre',
                'unique_together': {('band', 'genre')},
                'db_table': 'dbentry_band_genre',
            },
        ),
        migrations.CreateModel(
            name='m2m_autor_magazin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Autor')),
                ('magazin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Magazin')),
            ],
            options={
                'verbose_name_plural': 'Autor-Magazine',
                'verbose_name': 'Autor-Magazin',
                'unique_together': {('autor', 'magazin')},
                'db_table': 'dbentry_autor_magazin',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_veranstaltung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('veranstaltung', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Audio-Veranstaltungen',
                'verbose_name': 'Audio-Veranstaltung',
                'unique_together': {('audio', 'veranstaltung')},
                'db_table': 'dbentry_audio_veranstaltung',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_spielort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('spielort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Spielort')),
            ],
            options={
                'verbose_name_plural': 'Audio-Spielorte',
                'verbose_name': 'Audio-Spielort',
                'unique_together': {('audio', 'spielort')},
                'db_table': 'dbentry_audio_spielort',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_schlagwort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('schlagwort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Schlagwort')),
            ],
            options={
                'verbose_name_plural': 'Audio-Schlagworte',
                'verbose_name': 'Audio-Schlagwort',
                'unique_together': {('audio', 'schlagwort')},
                'db_table': 'dbentry_audio_schlagwort',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_plattenfirma',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('plattenfirma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Plattenfirma')),
            ],
            options={
                'verbose_name_plural': 'Audio-Plattenfirmen',
                'verbose_name': 'Audio-Plattenfirma',
                'db_table': 'dbentry_audio_plattenfirma',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Person')),
            ],
            options={
                'verbose_name_plural': 'Audio-Personen',
                'verbose_name': 'Audio-Person',
                'unique_together': {('audio', 'person')},
                'db_table': 'dbentry_audio_person',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_ort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('ort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ort')),
            ],
            options={
                'verbose_name_plural': 'Audio-Orte',
                'verbose_name': 'Audio-Ort',
                'unique_together': {('audio', 'ort')},
                'db_table': 'dbentry_audio_ort',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('instrument', models.ManyToManyField(blank=True, to='dbentry.Instrument', verbose_name='Instrumente')),
                ('musiker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker')),
            ],
            options={
                'verbose_name_plural': 'Audio-Musiker',
                'verbose_name': 'Audio-Musiker',
                'unique_together': {('audio', 'musiker')},
                'db_table': 'dbentry_audio_musiker',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'verbose_name_plural': 'Audio-Genres',
                'verbose_name': 'Audio-Genre',
                'unique_together': {('audio', 'genre')},
                'db_table': 'dbentry_audio_genre',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Band')),
            ],
            options={
                'verbose_name_plural': 'Audio-Bands',
                'verbose_name': 'Audio-Band',
                'unique_together': {('audio', 'band')},
                'db_table': 'dbentry_audio_band',
            },
        ),
        migrations.CreateModel(
            name='m2m_audio_ausgabe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('ausgabe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
            ],
            options={
                'verbose_name_plural': 'Musik-Beilagen',
                'verbose_name': 'Musik-Beilage',
                'unique_together': {('audio', 'ausgabe')},
                'db_table': 'dbentry_audio_ausgabe',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_veranstaltung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('veranstaltung', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Veranstaltungen',
                'verbose_name': 'Artikel-Veranstaltung',
                'unique_together': {('artikel', 'veranstaltung')},
                'db_table': 'dbentry_artikel_veranstaltung',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_spielort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('spielort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Spielort')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Spielorte',
                'verbose_name': 'Artikel-Spielort',
                'unique_together': {('artikel', 'spielort')},
                'db_table': 'dbentry_artikel_spielort',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_schlagwort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('schlagwort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Schlagwort')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Schlagwörter',
                'verbose_name': 'Artikel-Schlagwort',
                'unique_together': {('artikel', 'schlagwort')},
                'db_table': 'dbentry_artikel_schlagwort',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Person')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Personen',
                'verbose_name': 'Artikel-Person',
                'unique_together': {('artikel', 'person')},
                'db_table': 'dbentry_artikel_person',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_ort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('ort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ort')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Orte',
                'verbose_name': 'Artikel-Ort',
                'unique_together': {('artikel', 'ort')},
                'db_table': 'dbentry_artikel_ort',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_musiker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('musiker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Musiker')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Musiker',
                'verbose_name': 'Artikel-Musiker',
                'unique_together': {('artikel', 'musiker')},
                'db_table': 'dbentry_artikel_musiker',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Genres',
                'verbose_name': 'Artikel-Genre',
                'unique_together': {('artikel', 'genre')},
                'db_table': 'dbentry_artikel_genre',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Band')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Bands',
                'verbose_name': 'Artikel-Band',
                'unique_together': {('artikel', 'band')},
                'db_table': 'dbentry_artikel_band',
            },
        ),
        migrations.CreateModel(
            name='m2m_artikel_autor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artikel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Artikel')),
                ('autor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Autor')),
            ],
            options={
                'verbose_name_plural': 'Artikel-Autoren',
                'verbose_name': 'Artikel-Autor',
                'unique_together': {('artikel', 'autor')},
                'db_table': 'dbentry_artikel_autor',
            },
        ),
        migrations.CreateModel(
            name='GenreAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Genre')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_name', models.CharField(default='No data for %(verbose_name)s.', editable=False, max_length=200)),
                ('_changed_flag', models.BooleanField(default=False, editable=False)),
                ('anzahl', models.PositiveSmallIntegerField(default=1)),
                ('catalog_nr', models.CharField(blank=True, max_length=200, verbose_name='Katalog Nummer')),
                ('bemerkungen', models.TextField(blank=True)),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('format_size', models.ForeignKey(blank=True, help_text='LP, 12", Mini-Disc, etc.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.FormatSize', verbose_name='Format Größe')),
                ('format_typ', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.FormatTyp', verbose_name='Format Typ')),
                ('tag', models.ManyToManyField(blank=True, to='dbentry.FormatTag', verbose_name='Tags')),
            ],
            options={
                'verbose_name_plural': 'Formate',
                'verbose_name': 'Format',
                'abstract': False,
                'ordering': ['_name'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.AddField(
            model_name='dokument',
            name='genre',
            field=models.ManyToManyField(to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='musiker',
            field=models.ManyToManyField(to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='ort',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='person',
            field=models.ManyToManyField(to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='schlagwort',
            field=models.ManyToManyField(to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='spielort',
            field=models.ManyToManyField(to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='dokument',
            name='veranstaltung',
            field=models.ManyToManyField(to='dbentry.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='datei',
            name='genre',
            field=models.ManyToManyField(to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='datei',
            name='musiker',
            field=models.ManyToManyField(through='dbentry.m2m_datei_musiker', to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='datei',
            name='ort',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='datei',
            name='person',
            field=models.ManyToManyField(to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='datei',
            name='provenienz',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Provenienz'),
        ),
        migrations.AddField(
            model_name='datei',
            name='schlagwort',
            field=models.ManyToManyField(to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='datei',
            name='spielort',
            field=models.ManyToManyField(to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='datei',
            name='veranstaltung',
            field=models.ManyToManyField(to='dbentry.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='bundesland',
            name='land',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Land'),
        ),
        migrations.AddField(
            model_name='buch',
            name='genre',
            field=models.ManyToManyField(to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='buch',
            name='herausgeber',
            field=models.ManyToManyField(to='dbentry.Herausgeber'),
        ),
        migrations.AddField(
            model_name='buch',
            name='musiker',
            field=models.ManyToManyField(to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='buch',
            name='ort',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='buch',
            name='person',
            field=models.ManyToManyField(to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='buch',
            name='schlagwort',
            field=models.ManyToManyField(to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='buch',
            name='schriftenreihe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Schriftenreihe'),
        ),
        migrations.AddField(
            model_name='buch',
            name='spielort',
            field=models.ManyToManyField(to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='buch',
            name='veranstaltung',
            field=models.ManyToManyField(to='dbentry.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='buch',
            name='verlag',
            field=models.ManyToManyField(to='dbentry.Verlag'),
        ),
        migrations.CreateModel(
            name='BrochureYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jahr', dbentry.fields.YearField(verbose_name='Jahr')),
                ('brochure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jahre', to='dbentry.BaseBrochure')),
            ],
            options={
                'verbose_name_plural': 'Jahre',
                'verbose_name': 'Jahr',
                'abstract': False,
                'ordering': ['jahr'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='BrochureURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, verbose_name='Webpage')),
                ('brochure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='dbentry.BaseBrochure')),
            ],
            options={
                'verbose_name_plural': 'Web-Adressen',
                'verbose_name': 'Web-Adresse',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='genre',
            field=models.ManyToManyField(to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='musiker',
            field=models.ManyToManyField(to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='ort',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='person',
            field=models.ManyToManyField(to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='reihe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='dbentry.Bildreihe', verbose_name='Bildreihe'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='schlagwort',
            field=models.ManyToManyField(to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='spielort',
            field=models.ManyToManyField(to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='bildmaterial',
            name='veranstaltung',
            field=models.ManyToManyField(to='dbentry.Veranstaltung'),
        ),
        migrations.CreateModel(
            name='Bestand',
            fields=[
                ('signatur', models.AutoField(primary_key=True, serialize=False)),
                ('bestand_art', models.CharField(choices=[('audio', 'Audio'), ('ausgabe', 'Ausgabe'), ('bildmaterial', 'Bildmaterial'), ('buch', 'Buch'), ('dokument', 'Dokument'), ('memorabilien', 'Memorabilien'), ('technik', 'Technik'), ('video', 'Video')], default='ausgabe', max_length=20, verbose_name='Bestand-Art')),
                ('audio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Audio')),
                ('ausgabe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
                ('bildmaterial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Bildmaterial')),
                ('brochure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.BaseBrochure')),
                ('buch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Buch')),
                ('dokument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Dokument')),
                ('lagerort', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Lagerort')),
                ('memorabilien', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Memorabilien')),
                ('provenienz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Provenienz')),
                ('technik', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Technik')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dbentry.Video')),
            ],
            options={
                'verbose_name_plural': 'Bestände',
                'verbose_name': 'Bestand',
                'abstract': False,
                'ordering': ['pk'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.AddField(
            model_name='basebrochure',
            name='genre',
            field=models.ManyToManyField(to='dbentry.Genre'),
        ),
        migrations.CreateModel(
            name='BandAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(max_length=100, verbose_name='Alias')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Band')),
            ],
            options={
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
                'verbose_name': 'Alias',
                'abstract': False,
                'ordering': ['alias'],
            },
        ),
        migrations.AddField(
            model_name='band',
            name='genre',
            field=models.ManyToManyField(through='dbentry.m2m_band_genre', to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='band',
            name='musiker',
            field=models.ManyToManyField(through='dbentry.m2m_band_musiker', to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='band',
            name='orte',
            field=models.ManyToManyField(to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='autor',
            name='magazin',
            field=models.ManyToManyField(through='dbentry.m2m_autor_magazin', to='dbentry.Magazin'),
        ),
        migrations.AddField(
            model_name='autor',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='ausgabe',
            name='audio',
            field=models.ManyToManyField(through='dbentry.m2m_audio_ausgabe', to='dbentry.Audio'),
        ),
        migrations.AddField(
            model_name='ausgabe',
            name='magazin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Magazin'),
        ),
        migrations.AddField(
            model_name='audio',
            name='band',
            field=models.ManyToManyField(through='dbentry.m2m_audio_band', to='dbentry.Band'),
        ),
        migrations.AddField(
            model_name='audio',
            name='genre',
            field=models.ManyToManyField(through='dbentry.m2m_audio_genre', to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='audio',
            name='musiker',
            field=models.ManyToManyField(through='dbentry.m2m_audio_musiker', to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='audio',
            name='ort',
            field=models.ManyToManyField(through='dbentry.m2m_audio_ort', to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='audio',
            name='person',
            field=models.ManyToManyField(through='dbentry.m2m_audio_person', to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='audio',
            name='plattenfirma',
            field=models.ManyToManyField(through='dbentry.m2m_audio_plattenfirma', to='dbentry.Plattenfirma'),
        ),
        migrations.AddField(
            model_name='audio',
            name='schlagwort',
            field=models.ManyToManyField(through='dbentry.m2m_audio_schlagwort', to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='audio',
            name='spielort',
            field=models.ManyToManyField(through='dbentry.m2m_audio_spielort', to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='audio',
            name='veranstaltung',
            field=models.ManyToManyField(through='dbentry.m2m_audio_veranstaltung', to='dbentry.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='ausgabe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='dbentry.Ausgabe'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='autor',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_autor', to='dbentry.Autor'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='band',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_band', to='dbentry.Band'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='genre',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_genre', to='dbentry.Genre'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='musiker',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_musiker', to='dbentry.Musiker'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='ort',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_ort', to='dbentry.Ort'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='person',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_person', to='dbentry.Person'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='schlagwort',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_schlagwort', to='dbentry.Schlagwort'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='spielort',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_spielort', to='dbentry.Spielort'),
        ),
        migrations.AddField(
            model_name='artikel',
            name='veranstaltung',
            field=models.ManyToManyField(through='dbentry.m2m_artikel_veranstaltung', to='dbentry.Veranstaltung'),
        ),
        migrations.AlterUniqueTogether(
            name='m2m_video_musiker',
            unique_together={('video', 'musiker')},
        ),
        migrations.AlterUniqueTogether(
            name='m2m_musiker_instrument',
            unique_together={('musiker', 'instrument')},
        ),
        migrations.AlterUniqueTogether(
            name='m2m_musiker_genre',
            unique_together={('musiker', 'genre')},
        ),
        migrations.AlterUniqueTogether(
            name='m2m_magazin_verlag',
            unique_together={('magazin', 'verlag')},
        ),
        migrations.AlterUniqueTogether(
            name='m2m_magazin_herausgeber',
            unique_together={('magazin', 'herausgeber')},
        ),
        migrations.AlterUniqueTogether(
            name='m2m_magazin_genre',
            unique_together={('magazin', 'genre')},
        ),
        migrations.CreateModel(
            name='Kalendar',
            fields=[
                ('basebrochure_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dbentry.BaseBrochure')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. des Programmheftes')),
                ('spielort', models.ManyToManyField(to='dbentry.Spielort')),
                ('veranstaltung', models.ManyToManyField(to='dbentry.Veranstaltung')),
            ],
            options={
                'verbose_name_plural': 'Programmhefte',
                'verbose_name': 'Programmheft',
            },
            bases=('dbentry.basebrochure',),
        ),
        migrations.AlterUniqueTogether(
            name='bundesland',
            unique_together={('bland_name', 'land')},
        ),
        migrations.CreateModel(
            name='Brochure',
            fields=[
                ('basebrochure_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dbentry.BaseBrochure')),
                ('beschreibung', models.TextField(blank=True, help_text='Beschreibung bzgl. der Broschüre')),
                ('schlagwort', models.ManyToManyField(to='dbentry.Schlagwort')),
            ],
            options={
                'verbose_name_plural': 'Broschüren',
                'verbose_name': 'Broschüre',
            },
            bases=('dbentry.basebrochure',),
        ),
        migrations.CreateModel(
            name='AusgabeNum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(verbose_name='Nummer')),
                ('ausgabe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
            ],
            options={
                'verbose_name_plural': 'Ausgabennummer',
                'unique_together': {('num', 'ausgabe')},
                'verbose_name': 'Nummer',
                'abstract': False,
                'ordering': ['num'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='AusgabeMonat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ausgabe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
                ('monat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Monat')),
            ],
            options={
                'verbose_name_plural': 'Ausgabe-Monate',
                'unique_together': {('ausgabe', 'monat')},
                'verbose_name': 'Ausgabe-Monat',
                'abstract': False,
                'ordering': ['monat'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='AusgabeLnum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lnum', models.PositiveSmallIntegerField(verbose_name='Lfd. Nummer')),
                ('ausgabe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
            ],
            options={
                'verbose_name_plural': 'Laufende Nummer',
                'unique_together': {('lnum', 'ausgabe')},
                'verbose_name': 'lfd. Nummer',
                'abstract': False,
                'ordering': ['lnum'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
        migrations.CreateModel(
            name='AusgabeJahr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jahr', dbentry.fields.YearField(verbose_name='Jahr')),
                ('ausgabe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dbentry.Ausgabe')),
            ],
            options={
                'verbose_name_plural': 'Jahre',
                'unique_together': {('jahr', 'ausgabe')},
                'verbose_name': 'Jahr',
                'abstract': False,
                'ordering': ['jahr'],
                'default_permissions': ('add', 'change', 'delete', 'merge', 'view'),
            },
        ),
    ]
