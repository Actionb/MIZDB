# Generated by Django 3.2.14 on 2022-07-07 12:00
# Drop the indexes and triggers created by the tsvector_field package.
# The trigger functions will be removed in a later migration (because restoring
# them requires tsvector_field implementation details).

from django.core import exceptions
from django.db import migrations


def get_names(apps, schema_editor):
    for model in apps.get_models('dbentry'):
        table = model._meta.db_table
        field_name = '_fts'
        if model._meta.model_name == 'basebrochure':
            field_name = '_base_fts'
        try:
            field = model._meta.get_field(field_name)
        except exceptions.FieldDoesNotExist:
            continue
        yield model, field, (
                schema_editor._create_index_name(table, [field_name], suffix=suffix)
                for suffix in ('_tsvector', '_trigger', '_function')
            )


def forwards(apps, schema_editor):
    """Drop fts triggers and indexes."""
    for model, field, names in get_names(apps, schema_editor):
        table = model._meta.db_table
        index, trigger, function = names
        schema_editor.execute(f"DROP TRIGGER IF EXISTS {trigger} ON {table}")
        schema_editor.execute(f"DROP INDEX IF EXISTS {index}")


def backwards(apps, schema_editor):
    """Re-create fts triggers and indexes."""
    for model, field, names in get_names(apps, schema_editor):
        table = model._meta.db_table
        index, trigger, function = names
        index_type = 'GIN'
        column = schema_editor.quote_name(field.column)
        schema_editor.execute(f"CREATE INDEX {index} ON {table} USING {index_type} ({column})")
        schema_editor.execute(
            f"CREATE TRIGGER {trigger} BEFORE INSERT OR UPDATE"
            f" ON {table} FOR EACH ROW EXECUTE PROCEDURE {function}()"
        )


class Migration(migrations.Migration):

    dependencies = [
        ('dbentry', '0030_bestand_text_search_field'),
    ]

    operations = [
        migrations.RunPython(forwards, backwards)
    ]
