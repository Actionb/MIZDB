# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-09-15 11:49
from __future__ import unicode_literals

from django.db import migrations, models

data = [
# Discogs default tags
{'abk': 'Album', 'tag': 'Album'}, {'abk': 'MiniAlbum', 'tag': 'Mini-Album'}, {'abk': 'EP', 'tag': 'EP'}, 
{'abk': 'Maxi', 'tag': 'Maxi-Single'}, {'abk': 'Single', 'tag': 'Single'}, {'abk': 'Comp', 'tag': 'Compilation'}, 
{'abk': 'Card', 'tag': 'Card Backed'}, {'abk': 'Club', 'tag': 'Club Edition'}, {'abk': 'Deluxe', 'tag': 'Deluxe Edition'}, 
{'abk': 'Enhanced', 'tag': 'Enhanced'}, {'abk': 'Etched', 'tag': 'Etched'}, {'abk': 'Jukebox', 'tag': 'Jukebox'}, 
{'abk': 'Ltd', 'tag': 'Limited Edition'}, {'abk': 'Mispress', 'tag': 'Mispress'}, {'abk': 'Misprint', 'tag': 'Misprint'}, 
{'abk': 'Mixed', 'tag': 'Mixed'}, {'abk': 'Mixtape', 'tag': 'Mixtape'}, {'abk': 'Num', 'tag': 'Numbered'}, 
{'abk': 'P/Mixed', 'tag': 'Partially Mixed'}, {'abk': 'PU', 'tag': 'Partially Unofficial'}, 
{'abk': 'PictureDisc', 'tag': 'Picture Disc'}, {'abk': 'Promo', 'tag': 'Promo'}, {'abk': 'RE', 'tag': 'Reissue'}, 
{'abk': 'RM', 'tag': 'Remastered'}, {'abk': 'RP', 'tag': 'Repress'}, {'abk': 'Smplr', 'tag': 'Sampler'}, 
{'abk': 'S/Edition', 'tag': 'Special Edition'}, {'abk': 'Styrene', 'tag': 'Styrene'}, {'abk': 'TP', 'tag': 'Test Pressing'}, 
{'abk': 'Trans', 'tag': 'Transcription'}, {'abk': 'Unofficial', 'tag': 'Unofficial Release'}, {'abk': 'WL', 'tag': 'White Label'}, 
# Custom tags
#{'abk': 'Gat', 'tag': 'Gatefold '}, {'abk':'Emb', 'tag': 'Embossed Cover'}, 
#{'abk': 'Hal', 'tag': 'Half Speed Master'}, {'abk': 'Tri', 'tag': 'Trifold Sleeve'}, {'abk': 'Env', 'tag': 'Envelope'}, 
#{'abk': 'sta', 'tag': 'stapled cardboard cover'}, {'abk': 'Tex', 'tag': 'Textured Gatefold'}, {'abk': 'boo', 'tag': 'Booklet'}, 

]

def forwards_func(apps, schema_editor):
    model = apps.get_model('DBentry', 'FormatTag')
    records = []
    for d in data:
        records.append(model(**d))
    model.objects.bulk_create(records)
    
def reverse_func(apps, schema_editor):
    model = apps.get_model('DBentry', 'FormatTag')
    for d in data:
        record = model.objects.filter(**d).first()
        if record:
            record.delete()

class Migration(migrations.Migration):

    dependencies = [
        ('DBentry', '0063_DBentry_AudioDateiFormat'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func)
    ]
