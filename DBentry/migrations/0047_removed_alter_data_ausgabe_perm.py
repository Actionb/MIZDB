# Generated by Django 2.2 on 2019-04-23 09:19

from django.db import migrations

def delete_perm(apps, schema_editor):
    # looking up rather than the pk as (content_type, codename) as Permission._meta declares them as unique_together
    # and we are guaranteed to find the right perm no matter what state the db is in.
    from django.core.exceptions import ObjectDoesNotExist
    try:
        ausgabe = apps.get_model('DBentry.ausgabe')
        ContentType = apps.get_model('contenttypes.ContentType')
        Permission = apps.get_model('auth.Permission')
    except LookupError:
        return 
    try:
        ct = ContentType.objects.get_for_model(ausgabe)
        perm = Permission.objects.get(content_type = ct, codename = 'alter_data_ausgabe')
    except ObjectDoesNotExist:
        return
    perm.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('DBentry', '0046_alter_field_buchband'),
        ('auth', '__latest__'), 
        ('contenttypes', '__latest__')
    ]

    operations = [
        migrations.AlterModelOptions(
            name='ausgabe',
            options={'default_permissions': ('add', 'change', 'delete', 'merge'), 'ordering': ['magazin'], 'permissions': [('alter_bestand_ausgabe', 'Aktion: Bestand/Dublette hinzuf√ºgen.')], 'verbose_name': 'Ausgabe', 'verbose_name_plural': 'Ausgaben'},
        ),
        # Delete the 'alter_data_ausgabe' permission object.
        # When reversing, auth notices the missing permission and adds it with the post_migrate signal.
        migrations.RunPython(delete_perm, migrations.RunPython.noop)
    ]
