# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-04-27 08:47
from __future__ import unicode_literals

from django.db import migrations, transaction

def get_m2m_info(model, field_name):
    m2m_fld = model._meta.get_field(field_name)
    # The ForeignKey field on the intermediary table that points to model; .attname = person_id/band_id
    m2m_field_to_model = m2m_fld.get_reverse_path_info()[-1].join_field 
    # The ForeignKey field on the intermediary table that points to the related model; .attname = ort_id
    m2m_field_to_related_model = m2m_fld.get_path_info()[-1].join_field 
    m2m_model = m2m_fld.remote_field.through
    return (
        m2m_fld, m2m_field_to_model, m2m_field_to_related_model, m2m_model
    )
    
@transaction.atomic
def forwards(apps, schema_editor):
    # Four new m2m relations were created pointing towards model 'ort':
    # autor -> ort
    # band -> ort
    # musiker -> ort
    # person -> ort
    # Of these four models, band and person already had a relation with ort. Use the data of those relations to populate the 
    # respective m2m tables.
    # autor and musiker were remotely related to ort via person, this should be utilized as well.
    
    person = apps.get_model('DBentry', 'person')
    band = apps.get_model('DBentry', 'band')
    autor = apps.get_model('DBentry', 'autor')
    musiker = apps.get_model('DBentry', 'musiker')
    
    for model, field_path in [
        (person, 'herkunft_id'), (band, 'herkunft_id'), (autor, 'person__herkunft_id'), (musiker, 'person__herkunft_id')]:

        m2m_fld, m2m_field_to_model, m2m_field_to_related_model, m2m_model = get_m2m_info(model, 'orte')
        # Purge the m2m_model (after all, it is expected to have just been created)
        m2m_model.objects.all().delete()
        
        # Prepare instances of the corresponding m2m_model
        instances = [
            m2m_model(**{
                m2m_field_to_model.attname : object_id, 
                m2m_field_to_related_model.attname : ort_id
            })
            for object_id, ort_id in 
            model.objects.exclude(**{field_path+'__isnull':True}).values_list('pk', field_path)
            if object_id and ort_id
        ]
        m2m_model.objects.bulk_create(instances)
  
@transaction.atomic  
def reverse(apps, schema_editor):
    # Recreate the data for the ForeignKey fields that have had been deleted in the next migration.
    person = apps.get_model('DBentry', 'person')
    band = apps.get_model('DBentry', 'band')
    
    for model in [person, band]:
        
        m2m_fld, m2m_field_to_model, m2m_field_to_related_model, m2m_model = get_m2m_info(model, 'orte')
        
        fkey_fld = model._meta.get_field('herkunft')
        
        for object_id, ort_id in m2m_model.objects.values_list(m2m_field_to_model.attname, m2m_field_to_related_model.attname):
            model.objects.filter(pk=object_id).update(**{fkey_fld.attname:ort_id})


class Migration(migrations.Migration):

    dependencies = [
        ('DBentry', '0013_DBentry_ModelRework_10_OrteM2MAdded'),
    ]

    operations = [
        migrations.RunPython(forwards, reverse)
    ]
